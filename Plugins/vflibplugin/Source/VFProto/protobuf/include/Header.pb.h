// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Header_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Header_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Header_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Header_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Header_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Header_2eproto_metadata_getter(int index);
class AngleDimension;
struct AngleDimensionDefaultTypeInternal;
extern AngleDimensionDefaultTypeInternal _AngleDimension_default_instance_;
class FixedIntArray;
struct FixedIntArrayDefaultTypeInternal;
extern FixedIntArrayDefaultTypeInternal _FixedIntArray_default_instance_;
class FrameDescription;
struct FrameDescriptionDefaultTypeInternal;
extern FrameDescriptionDefaultTypeInternal _FrameDescription_default_instance_;
class GeoData;
struct GeoDataDefaultTypeInternal;
extern GeoDataDefaultTypeInternal _GeoData_default_instance_;
class GeoPosition;
struct GeoPositionDefaultTypeInternal;
extern GeoPositionDefaultTypeInternal _GeoPosition_default_instance_;
class IntArray;
struct IntArrayDefaultTypeInternal;
extern IntArrayDefaultTypeInternal _IntArray_default_instance_;
class Metainfo;
struct MetainfoDefaultTypeInternal;
extern MetainfoDefaultTypeInternal _Metainfo_default_instance_;
class Navigation;
struct NavigationDefaultTypeInternal;
extern NavigationDefaultTypeInternal _Navigation_default_instance_;
class Orientation;
struct OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
class Picinfo;
struct PicinfoDefaultTypeInternal;
extern PicinfoDefaultTypeInternal _Picinfo_default_instance_;
class PseudoCoordinate;
struct PseudoCoordinateDefaultTypeInternal;
extern PseudoCoordinateDefaultTypeInternal _PseudoCoordinate_default_instance_;
class Satellites;
struct SatellitesDefaultTypeInternal;
extern SatellitesDefaultTypeInternal _Satellites_default_instance_;
class Vector3d;
struct Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AngleDimension* Arena::CreateMaybeMessage<::AngleDimension>(Arena*);
template<> ::FixedIntArray* Arena::CreateMaybeMessage<::FixedIntArray>(Arena*);
template<> ::FrameDescription* Arena::CreateMaybeMessage<::FrameDescription>(Arena*);
template<> ::GeoData* Arena::CreateMaybeMessage<::GeoData>(Arena*);
template<> ::GeoPosition* Arena::CreateMaybeMessage<::GeoPosition>(Arena*);
template<> ::IntArray* Arena::CreateMaybeMessage<::IntArray>(Arena*);
template<> ::Metainfo* Arena::CreateMaybeMessage<::Metainfo>(Arena*);
template<> ::Navigation* Arena::CreateMaybeMessage<::Navigation>(Arena*);
template<> ::Orientation* Arena::CreateMaybeMessage<::Orientation>(Arena*);
template<> ::Picinfo* Arena::CreateMaybeMessage<::Picinfo>(Arena*);
template<> ::PseudoCoordinate* Arena::CreateMaybeMessage<::PseudoCoordinate>(Arena*);
template<> ::Satellites* Arena::CreateMaybeMessage<::Satellites>(Arena*);
template<> ::Vector3d* Arena::CreateMaybeMessage<::Vector3d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum LensTypes : int {
  UnknownLens = 0,
  TheiaSL940 = 1,
  EF24F28 = 2,
  EF50F18 = 3
};
bool LensTypes_IsValid(int value);
constexpr LensTypes LensTypes_MIN = UnknownLens;
constexpr LensTypes LensTypes_MAX = EF50F18;
constexpr int LensTypes_ARRAYSIZE = LensTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LensTypes_descriptor();
template<typename T>
inline const std::string& LensTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LensTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LensTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LensTypes_descriptor(), enum_t_value);
}
inline bool LensTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LensTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LensTypes>(
    LensTypes_descriptor(), name, value);
}
enum CameraTypes : int {
  UnknownCamera = 0,
  CANON550D = 1,
  EVS = 2,
  TAU640 = 3,
  CANON650D = 4
};
bool CameraTypes_IsValid(int value);
constexpr CameraTypes CameraTypes_MIN = UnknownCamera;
constexpr CameraTypes CameraTypes_MAX = CANON650D;
constexpr int CameraTypes_ARRAYSIZE = CameraTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraTypes_descriptor();
template<typename T>
inline const std::string& CameraTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraTypes_descriptor(), enum_t_value);
}
inline bool CameraTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraTypes>(
    CameraTypes_descriptor(), name, value);
}
// ===================================================================

class GeoPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GeoPosition) */ {
 public:
  inline GeoPosition() : GeoPosition(nullptr) {}
  virtual ~GeoPosition();
  explicit constexpr GeoPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeoPosition(const GeoPosition& from);
  GeoPosition(GeoPosition&& from) noexcept
    : GeoPosition() {
    *this = ::std::move(from);
  }

  inline GeoPosition& operator=(const GeoPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoPosition& operator=(GeoPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeoPosition* internal_default_instance() {
    return reinterpret_cast<const GeoPosition*>(
               &_GeoPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeoPosition& a, GeoPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoPosition* New() const final {
    return CreateMaybeMessage<GeoPosition>(nullptr);
  }

  GeoPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoPosition& from);
  void MergeFrom(const GeoPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GeoPosition";
  }
  protected:
  explicit GeoPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
    kEpsgFieldNumber = 4,
  };
  // required double latitude = 1;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // required double longitude = 2;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // required double altitude = 3;
  bool has_altitude() const;
  private:
  bool _internal_has_altitude() const;
  public:
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // optional int32 epsg = 4;
  bool has_epsg() const;
  private:
  bool _internal_has_epsg() const;
  public:
  void clear_epsg();
  ::PROTOBUF_NAMESPACE_ID::int32 epsg() const;
  void set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epsg() const;
  void _internal_set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GeoPosition)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double latitude_;
  double longitude_;
  double altitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 epsg_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class Orientation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Orientation) */ {
 public:
  inline Orientation() : Orientation(nullptr) {}
  virtual ~Orientation();
  explicit constexpr Orientation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Orientation(const Orientation& from);
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation& operator=(Orientation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Orientation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Orientation* New() const final {
    return CreateMaybeMessage<Orientation>(nullptr);
  }

  Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Orientation& from);
  void MergeFrom(const Orientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orientation";
  }
  protected:
  explicit Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // required float roll = 1;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // required float pitch = 2;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // required float yaw = 3;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Orientation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float roll_;
  float pitch_;
  float yaw_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class Vector3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector3d) */ {
 public:
  inline Vector3d() : Vector3d(nullptr) {}
  virtual ~Vector3d();
  explicit constexpr Vector3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3d(const Vector3d& from);
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3d* New() const final {
    return CreateMaybeMessage<Vector3d>(nullptr);
  }

  Vector3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector3d";
  }
  protected:
  explicit Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kEpsgFieldNumber = 4,
  };
  // required double X = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double Y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // required double Z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional int32 epsg = 4;
  bool has_epsg() const;
  private:
  bool _internal_has_epsg() const;
  public:
  void clear_epsg();
  ::PROTOBUF_NAMESPACE_ID::int32 epsg() const;
  void set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epsg() const;
  void _internal_set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Vector3d)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  ::PROTOBUF_NAMESPACE_ID::int32 epsg_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class IntArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IntArray) */ {
 public:
  inline IntArray() : IntArray(nullptr) {}
  virtual ~IntArray();
  explicit constexpr IntArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntArray(const IntArray& from);
  IntArray(IntArray&& from) noexcept
    : IntArray() {
    *this = ::std::move(from);
  }

  inline IntArray& operator=(const IntArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntArray& operator=(IntArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntArray* internal_default_instance() {
    return reinterpret_cast<const IntArray*>(
               &_IntArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IntArray& a, IntArray& b) {
    a.Swap(&b);
  }
  inline void Swap(IntArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntArray* New() const final {
    return CreateMaybeMessage<IntArray>(nullptr);
  }

  IntArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntArray& from);
  void MergeFrom(const IntArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IntArray";
  }
  protected:
  explicit IntArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated int32 item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_item() const;
  void _internal_add_item(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_item();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 item(int index) const;
  void set_item(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_item(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      item() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:IntArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class FixedIntArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FixedIntArray) */ {
 public:
  inline FixedIntArray() : FixedIntArray(nullptr) {}
  virtual ~FixedIntArray();
  explicit constexpr FixedIntArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FixedIntArray(const FixedIntArray& from);
  FixedIntArray(FixedIntArray&& from) noexcept
    : FixedIntArray() {
    *this = ::std::move(from);
  }

  inline FixedIntArray& operator=(const FixedIntArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedIntArray& operator=(FixedIntArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FixedIntArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixedIntArray* internal_default_instance() {
    return reinterpret_cast<const FixedIntArray*>(
               &_FixedIntArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FixedIntArray& a, FixedIntArray& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedIntArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedIntArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixedIntArray* New() const final {
    return CreateMaybeMessage<FixedIntArray>(nullptr);
  }

  FixedIntArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixedIntArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FixedIntArray& from);
  void MergeFrom(const FixedIntArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedIntArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FixedIntArray";
  }
  protected:
  explicit FixedIntArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated sfixed32 item = 1 [packed = true];
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_item() const;
  void _internal_add_item(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_item();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 item(int index) const;
  void set_item(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_item(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      item() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:FixedIntArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > item_;
  mutable std::atomic<int> _item_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class Satellites PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Satellites) */ {
 public:
  inline Satellites() : Satellites(nullptr) {}
  virtual ~Satellites();
  explicit constexpr Satellites(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Satellites(const Satellites& from);
  Satellites(Satellites&& from) noexcept
    : Satellites() {
    *this = ::std::move(from);
  }

  inline Satellites& operator=(const Satellites& from) {
    CopyFrom(from);
    return *this;
  }
  inline Satellites& operator=(Satellites&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Satellites& default_instance() {
    return *internal_default_instance();
  }
  static inline const Satellites* internal_default_instance() {
    return reinterpret_cast<const Satellites*>(
               &_Satellites_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Satellites& a, Satellites& b) {
    a.Swap(&b);
  }
  inline void Swap(Satellites* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Satellites* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Satellites* New() const final {
    return CreateMaybeMessage<Satellites>(nullptr);
  }

  Satellites* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Satellites>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Satellites& from);
  void MergeFrom(const Satellites& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Satellites* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Satellites";
  }
  protected:
  explicit Satellites(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSatellitesFieldNumber = 1,
    kPotentiallySatellitesFieldNumber = 2,
  };
  // optional bytes satellites = 1;
  bool has_satellites() const;
  private:
  bool _internal_has_satellites() const;
  public:
  void clear_satellites();
  const std::string& satellites() const;
  void set_satellites(const std::string& value);
  void set_satellites(std::string&& value);
  void set_satellites(const char* value);
  void set_satellites(const void* value, size_t size);
  std::string* mutable_satellites();
  std::string* release_satellites();
  void set_allocated_satellites(std::string* satellites);
  private:
  const std::string& _internal_satellites() const;
  void _internal_set_satellites(const std::string& value);
  std::string* _internal_mutable_satellites();
  public:

  // optional bytes potentiallySatellites = 2;
  bool has_potentiallysatellites() const;
  private:
  bool _internal_has_potentiallysatellites() const;
  public:
  void clear_potentiallysatellites();
  const std::string& potentiallysatellites() const;
  void set_potentiallysatellites(const std::string& value);
  void set_potentiallysatellites(std::string&& value);
  void set_potentiallysatellites(const char* value);
  void set_potentiallysatellites(const void* value, size_t size);
  std::string* mutable_potentiallysatellites();
  std::string* release_potentiallysatellites();
  void set_allocated_potentiallysatellites(std::string* potentiallysatellites);
  private:
  const std::string& _internal_potentiallysatellites() const;
  void _internal_set_potentiallysatellites(const std::string& value);
  std::string* _internal_mutable_potentiallysatellites();
  public:

  // @@protoc_insertion_point(class_scope:Satellites)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr satellites_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr potentiallysatellites_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class PseudoCoordinate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PseudoCoordinate) */ {
 public:
  inline PseudoCoordinate() : PseudoCoordinate(nullptr) {}
  virtual ~PseudoCoordinate();
  explicit constexpr PseudoCoordinate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PseudoCoordinate(const PseudoCoordinate& from);
  PseudoCoordinate(PseudoCoordinate&& from) noexcept
    : PseudoCoordinate() {
    *this = ::std::move(from);
  }

  inline PseudoCoordinate& operator=(const PseudoCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PseudoCoordinate& operator=(PseudoCoordinate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PseudoCoordinate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PseudoCoordinate* internal_default_instance() {
    return reinterpret_cast<const PseudoCoordinate*>(
               &_PseudoCoordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PseudoCoordinate& a, PseudoCoordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(PseudoCoordinate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PseudoCoordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PseudoCoordinate* New() const final {
    return CreateMaybeMessage<PseudoCoordinate>(nullptr);
  }

  PseudoCoordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PseudoCoordinate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PseudoCoordinate& from);
  void MergeFrom(const PseudoCoordinate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PseudoCoordinate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PseudoCoordinate";
  }
  protected:
  explicit PseudoCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPseudoDistanceFieldNumber = 1,
    kPseudoVelocityFieldNumber = 2,
    kDebugInfoFieldNumber = 3,
  };
  // optional .FixedIntArray pseudoDistance = 1;
  bool has_pseudodistance() const;
  private:
  bool _internal_has_pseudodistance() const;
  public:
  void clear_pseudodistance();
  const ::FixedIntArray& pseudodistance() const;
  ::FixedIntArray* release_pseudodistance();
  ::FixedIntArray* mutable_pseudodistance();
  void set_allocated_pseudodistance(::FixedIntArray* pseudodistance);
  private:
  const ::FixedIntArray& _internal_pseudodistance() const;
  ::FixedIntArray* _internal_mutable_pseudodistance();
  public:
  void unsafe_arena_set_allocated_pseudodistance(
      ::FixedIntArray* pseudodistance);
  ::FixedIntArray* unsafe_arena_release_pseudodistance();

  // optional .FixedIntArray pseudoVelocity = 2;
  bool has_pseudovelocity() const;
  private:
  bool _internal_has_pseudovelocity() const;
  public:
  void clear_pseudovelocity();
  const ::FixedIntArray& pseudovelocity() const;
  ::FixedIntArray* release_pseudovelocity();
  ::FixedIntArray* mutable_pseudovelocity();
  void set_allocated_pseudovelocity(::FixedIntArray* pseudovelocity);
  private:
  const ::FixedIntArray& _internal_pseudovelocity() const;
  ::FixedIntArray* _internal_mutable_pseudovelocity();
  public:
  void unsafe_arena_set_allocated_pseudovelocity(
      ::FixedIntArray* pseudovelocity);
  ::FixedIntArray* unsafe_arena_release_pseudovelocity();

  // optional .FixedIntArray debugInfo = 3;
  bool has_debuginfo() const;
  private:
  bool _internal_has_debuginfo() const;
  public:
  void clear_debuginfo();
  const ::FixedIntArray& debuginfo() const;
  ::FixedIntArray* release_debuginfo();
  ::FixedIntArray* mutable_debuginfo();
  void set_allocated_debuginfo(::FixedIntArray* debuginfo);
  private:
  const ::FixedIntArray& _internal_debuginfo() const;
  ::FixedIntArray* _internal_mutable_debuginfo();
  public:
  void unsafe_arena_set_allocated_debuginfo(
      ::FixedIntArray* debuginfo);
  ::FixedIntArray* unsafe_arena_release_debuginfo();

  // @@protoc_insertion_point(class_scope:PseudoCoordinate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::FixedIntArray* pseudodistance_;
  ::FixedIntArray* pseudovelocity_;
  ::FixedIntArray* debuginfo_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class Navigation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Navigation) */ {
 public:
  inline Navigation() : Navigation(nullptr) {}
  virtual ~Navigation();
  explicit constexpr Navigation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Navigation(const Navigation& from);
  Navigation(Navigation&& from) noexcept
    : Navigation() {
    *this = ::std::move(from);
  }

  inline Navigation& operator=(const Navigation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Navigation& operator=(Navigation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Navigation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Navigation* internal_default_instance() {
    return reinterpret_cast<const Navigation*>(
               &_Navigation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Navigation& a, Navigation& b) {
    a.Swap(&b);
  }
  inline void Swap(Navigation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Navigation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Navigation* New() const final {
    return CreateMaybeMessage<Navigation>(nullptr);
  }

  Navigation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Navigation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Navigation& from);
  void MergeFrom(const Navigation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Navigation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Navigation";
  }
  protected:
  explicit Navigation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kGeoPositionFieldNumber = 5,
    kOrientationFieldNumber = 6,
    kXYZPositionFieldNumber = 7,
    kXYZSpeedFieldNumber = 8,
    kSatellitesFieldNumber = 12,
    kPseudoCoordinateFieldNumber = 13,
    kGpsCourseFieldNumber = 1,
    kVelocityFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kTowFieldNumber = 9,
    kDebugFieldNumber = 10,
    kQualityFieldNumber = 11,
    kStrobeMarkerFieldNumber = 15,
    kAerialAltitudeFieldNumber = 14,
  };
  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .GeoPosition geoPosition = 5;
  bool has_geoposition() const;
  private:
  bool _internal_has_geoposition() const;
  public:
  void clear_geoposition();
  const ::GeoPosition& geoposition() const;
  ::GeoPosition* release_geoposition();
  ::GeoPosition* mutable_geoposition();
  void set_allocated_geoposition(::GeoPosition* geoposition);
  private:
  const ::GeoPosition& _internal_geoposition() const;
  ::GeoPosition* _internal_mutable_geoposition();
  public:
  void unsafe_arena_set_allocated_geoposition(
      ::GeoPosition* geoposition);
  ::GeoPosition* unsafe_arena_release_geoposition();

  // optional .Orientation orientation = 6;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::Orientation& orientation() const;
  ::Orientation* release_orientation();
  ::Orientation* mutable_orientation();
  void set_allocated_orientation(::Orientation* orientation);
  private:
  const ::Orientation& _internal_orientation() const;
  ::Orientation* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::Orientation* orientation);
  ::Orientation* unsafe_arena_release_orientation();

  // optional .Vector3d XYZPosition = 7;
  bool has_xyzposition() const;
  private:
  bool _internal_has_xyzposition() const;
  public:
  void clear_xyzposition();
  const ::Vector3d& xyzposition() const;
  ::Vector3d* release_xyzposition();
  ::Vector3d* mutable_xyzposition();
  void set_allocated_xyzposition(::Vector3d* xyzposition);
  private:
  const ::Vector3d& _internal_xyzposition() const;
  ::Vector3d* _internal_mutable_xyzposition();
  public:
  void unsafe_arena_set_allocated_xyzposition(
      ::Vector3d* xyzposition);
  ::Vector3d* unsafe_arena_release_xyzposition();

  // optional .Vector3d XYZSpeed = 8;
  bool has_xyzspeed() const;
  private:
  bool _internal_has_xyzspeed() const;
  public:
  void clear_xyzspeed();
  const ::Vector3d& xyzspeed() const;
  ::Vector3d* release_xyzspeed();
  ::Vector3d* mutable_xyzspeed();
  void set_allocated_xyzspeed(::Vector3d* xyzspeed);
  private:
  const ::Vector3d& _internal_xyzspeed() const;
  ::Vector3d* _internal_mutable_xyzspeed();
  public:
  void unsafe_arena_set_allocated_xyzspeed(
      ::Vector3d* xyzspeed);
  ::Vector3d* unsafe_arena_release_xyzspeed();

  // optional .Satellites satellites = 12;
  bool has_satellites() const;
  private:
  bool _internal_has_satellites() const;
  public:
  void clear_satellites();
  const ::Satellites& satellites() const;
  ::Satellites* release_satellites();
  ::Satellites* mutable_satellites();
  void set_allocated_satellites(::Satellites* satellites);
  private:
  const ::Satellites& _internal_satellites() const;
  ::Satellites* _internal_mutable_satellites();
  public:
  void unsafe_arena_set_allocated_satellites(
      ::Satellites* satellites);
  ::Satellites* unsafe_arena_release_satellites();

  // optional .PseudoCoordinate pseudoCoordinate = 13;
  bool has_pseudocoordinate() const;
  private:
  bool _internal_has_pseudocoordinate() const;
  public:
  void clear_pseudocoordinate();
  const ::PseudoCoordinate& pseudocoordinate() const;
  ::PseudoCoordinate* release_pseudocoordinate();
  ::PseudoCoordinate* mutable_pseudocoordinate();
  void set_allocated_pseudocoordinate(::PseudoCoordinate* pseudocoordinate);
  private:
  const ::PseudoCoordinate& _internal_pseudocoordinate() const;
  ::PseudoCoordinate* _internal_mutable_pseudocoordinate();
  public:
  void unsafe_arena_set_allocated_pseudocoordinate(
      ::PseudoCoordinate* pseudocoordinate);
  ::PseudoCoordinate* unsafe_arena_release_pseudocoordinate();

  // optional float gpsCourse = 1;
  bool has_gpscourse() const;
  private:
  bool _internal_has_gpscourse() const;
  public:
  void clear_gpscourse();
  float gpscourse() const;
  void set_gpscourse(float value);
  private:
  float _internal_gpscourse() const;
  void _internal_set_gpscourse(float value);
  public:

  // optional float velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  float velocity() const;
  void set_velocity(float value);
  private:
  float _internal_velocity() const;
  void _internal_set_velocity(float value);
  public:

  // required int64 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 tow = 9;
  bool has_tow() const;
  private:
  bool _internal_has_tow() const;
  public:
  void clear_tow();
  ::PROTOBUF_NAMESPACE_ID::int32 tow() const;
  void set_tow(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tow() const;
  void _internal_set_tow(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 debug = 10;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  ::PROTOBUF_NAMESPACE_ID::int32 debug() const;
  void set_debug(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_debug() const;
  void _internal_set_debug(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float quality = 11;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  float quality() const;
  void set_quality(float value);
  private:
  float _internal_quality() const;
  void _internal_set_quality(float value);
  public:

  // optional int32 strobeMarker = 15;
  bool has_strobemarker() const;
  private:
  bool _internal_has_strobemarker() const;
  public:
  void clear_strobemarker();
  ::PROTOBUF_NAMESPACE_ID::int32 strobemarker() const;
  void set_strobemarker(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strobemarker() const;
  void _internal_set_strobemarker(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double aerialAltitude = 14;
  bool has_aerialaltitude() const;
  private:
  bool _internal_has_aerialaltitude() const;
  public:
  void clear_aerialaltitude();
  double aerialaltitude() const;
  void set_aerialaltitude(double value);
  private:
  double _internal_aerialaltitude() const;
  void _internal_set_aerialaltitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:Navigation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::GeoPosition* geoposition_;
  ::Orientation* orientation_;
  ::Vector3d* xyzposition_;
  ::Vector3d* xyzspeed_;
  ::Satellites* satellites_;
  ::PseudoCoordinate* pseudocoordinate_;
  float gpscourse_;
  float velocity_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 tow_;
  ::PROTOBUF_NAMESPACE_ID::int32 debug_;
  float quality_;
  ::PROTOBUF_NAMESPACE_ID::int32 strobemarker_;
  double aerialaltitude_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class GeoData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GeoData) */ {
 public:
  inline GeoData() : GeoData(nullptr) {}
  virtual ~GeoData();
  explicit constexpr GeoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeoData(const GeoData& from);
  GeoData(GeoData&& from) noexcept
    : GeoData() {
    *this = ::std::move(from);
  }

  inline GeoData& operator=(const GeoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoData& operator=(GeoData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeoData* internal_default_instance() {
    return reinterpret_cast<const GeoData*>(
               &_GeoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GeoData& a, GeoData& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoData* New() const final {
    return CreateMaybeMessage<GeoData>(nullptr);
  }

  GeoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoData& from);
  void MergeFrom(const GeoData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GeoData";
  }
  protected:
  explicit GeoData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNavigationsFieldNumber = 1,
  };
  // repeated .Navigation navigations = 1;
  int navigations_size() const;
  private:
  int _internal_navigations_size() const;
  public:
  void clear_navigations();
  ::Navigation* mutable_navigations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Navigation >*
      mutable_navigations();
  private:
  const ::Navigation& _internal_navigations(int index) const;
  ::Navigation* _internal_add_navigations();
  public:
  const ::Navigation& navigations(int index) const;
  ::Navigation* add_navigations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Navigation >&
      navigations() const;

  // @@protoc_insertion_point(class_scope:GeoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Navigation > navigations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class AngleDimension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AngleDimension) */ {
 public:
  inline AngleDimension() : AngleDimension(nullptr) {}
  virtual ~AngleDimension();
  explicit constexpr AngleDimension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AngleDimension(const AngleDimension& from);
  AngleDimension(AngleDimension&& from) noexcept
    : AngleDimension() {
    *this = ::std::move(from);
  }

  inline AngleDimension& operator=(const AngleDimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngleDimension& operator=(AngleDimension&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AngleDimension& default_instance() {
    return *internal_default_instance();
  }
  static inline const AngleDimension* internal_default_instance() {
    return reinterpret_cast<const AngleDimension*>(
               &_AngleDimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AngleDimension& a, AngleDimension& b) {
    a.Swap(&b);
  }
  inline void Swap(AngleDimension* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngleDimension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AngleDimension* New() const final {
    return CreateMaybeMessage<AngleDimension>(nullptr);
  }

  AngleDimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AngleDimension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AngleDimension& from);
  void MergeFrom(const AngleDimension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngleDimension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AngleDimension";
  }
  protected:
  explicit AngleDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // required float width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // required float height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:AngleDimension)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float width_;
  float height_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class FrameDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameDescription) */ {
 public:
  inline FrameDescription() : FrameDescription(nullptr) {}
  virtual ~FrameDescription();
  explicit constexpr FrameDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameDescription(const FrameDescription& from);
  FrameDescription(FrameDescription&& from) noexcept
    : FrameDescription() {
    *this = ::std::move(from);
  }

  inline FrameDescription& operator=(const FrameDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameDescription& operator=(FrameDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameDescription* internal_default_instance() {
    return reinterpret_cast<const FrameDescription*>(
               &_FrameDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FrameDescription& a, FrameDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameDescription* New() const final {
    return CreateMaybeMessage<FrameDescription>(nullptr);
  }

  FrameDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameDescription& from);
  void MergeFrom(const FrameDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameDescription";
  }
  protected:
  explicit FrameDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 6,
    kLensNameFieldNumber = 7,
    kGeoDataFieldNumber = 1,
    kAngleDimensionFieldNumber = 2,
    kCameraTypeFieldNumber = 3,
    kLensTypeFieldNumber = 4,
    kZoomFieldNumber = 5,
    kStrobeMaskFieldNumber = 10,
    kNavBeginFieldNumber = 8,
    kNavEndFieldNumber = 9,
  };
  // optional string description = 6;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string lensName = 7;
  bool has_lensname() const;
  private:
  bool _internal_has_lensname() const;
  public:
  void clear_lensname();
  const std::string& lensname() const;
  void set_lensname(const std::string& value);
  void set_lensname(std::string&& value);
  void set_lensname(const char* value);
  void set_lensname(const char* value, size_t size);
  std::string* mutable_lensname();
  std::string* release_lensname();
  void set_allocated_lensname(std::string* lensname);
  private:
  const std::string& _internal_lensname() const;
  void _internal_set_lensname(const std::string& value);
  std::string* _internal_mutable_lensname();
  public:

  // required .GeoData geoData = 1;
  bool has_geodata() const;
  private:
  bool _internal_has_geodata() const;
  public:
  void clear_geodata();
  const ::GeoData& geodata() const;
  ::GeoData* release_geodata();
  ::GeoData* mutable_geodata();
  void set_allocated_geodata(::GeoData* geodata);
  private:
  const ::GeoData& _internal_geodata() const;
  ::GeoData* _internal_mutable_geodata();
  public:
  void unsafe_arena_set_allocated_geodata(
      ::GeoData* geodata);
  ::GeoData* unsafe_arena_release_geodata();

  // optional .AngleDimension angleDimension = 2;
  bool has_angledimension() const;
  private:
  bool _internal_has_angledimension() const;
  public:
  void clear_angledimension();
  const ::AngleDimension& angledimension() const;
  ::AngleDimension* release_angledimension();
  ::AngleDimension* mutable_angledimension();
  void set_allocated_angledimension(::AngleDimension* angledimension);
  private:
  const ::AngleDimension& _internal_angledimension() const;
  ::AngleDimension* _internal_mutable_angledimension();
  public:
  void unsafe_arena_set_allocated_angledimension(
      ::AngleDimension* angledimension);
  ::AngleDimension* unsafe_arena_release_angledimension();

  // optional .CameraTypes cameraType = 3 [default = UnknownCamera];
  bool has_cameratype() const;
  private:
  bool _internal_has_cameratype() const;
  public:
  void clear_cameratype();
  ::CameraTypes cameratype() const;
  void set_cameratype(::CameraTypes value);
  private:
  ::CameraTypes _internal_cameratype() const;
  void _internal_set_cameratype(::CameraTypes value);
  public:

  // optional .LensTypes lensType = 4 [default = UnknownLens];
  bool has_lenstype() const;
  private:
  bool _internal_has_lenstype() const;
  public:
  void clear_lenstype();
  ::LensTypes lenstype() const;
  void set_lenstype(::LensTypes value);
  private:
  ::LensTypes _internal_lenstype() const;
  void _internal_set_lenstype(::LensTypes value);
  public:

  // optional float zoom = 5;
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;
  public:
  void clear_zoom();
  float zoom() const;
  void set_zoom(float value);
  private:
  float _internal_zoom() const;
  void _internal_set_zoom(float value);
  public:

  // optional uint32 strobeMask = 10;
  bool has_strobemask() const;
  private:
  bool _internal_has_strobemask() const;
  public:
  void clear_strobemask();
  ::PROTOBUF_NAMESPACE_ID::uint32 strobemask() const;
  void set_strobemask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_strobemask() const;
  void _internal_set_strobemask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int64 navBegin = 8;
  bool has_navbegin() const;
  private:
  bool _internal_has_navbegin() const;
  public:
  void clear_navbegin();
  ::PROTOBUF_NAMESPACE_ID::int64 navbegin() const;
  void set_navbegin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_navbegin() const;
  void _internal_set_navbegin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 navEnd = 9;
  bool has_navend() const;
  private:
  bool _internal_has_navend() const;
  public:
  void clear_navend();
  ::PROTOBUF_NAMESPACE_ID::int64 navend() const;
  void set_navend(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_navend() const;
  void _internal_set_navend(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:FrameDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lensname_;
  ::GeoData* geodata_;
  ::AngleDimension* angledimension_;
  int cameratype_;
  int lenstype_;
  float zoom_;
  ::PROTOBUF_NAMESPACE_ID::uint32 strobemask_;
  ::PROTOBUF_NAMESPACE_ID::int64 navbegin_;
  ::PROTOBUF_NAMESPACE_ID::int64 navend_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class Picinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Picinfo) */ {
 public:
  inline Picinfo() : Picinfo(nullptr) {}
  virtual ~Picinfo();
  explicit constexpr Picinfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Picinfo(const Picinfo& from);
  Picinfo(Picinfo&& from) noexcept
    : Picinfo() {
    *this = ::std::move(from);
  }

  inline Picinfo& operator=(const Picinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Picinfo& operator=(Picinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Picinfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Picinfo* internal_default_instance() {
    return reinterpret_cast<const Picinfo*>(
               &_Picinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Picinfo& a, Picinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Picinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Picinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Picinfo* New() const final {
    return CreateMaybeMessage<Picinfo>(nullptr);
  }

  Picinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Picinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Picinfo& from);
  void MergeFrom(const Picinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Picinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Picinfo";
  }
  protected:
  explicit Picinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX00FieldNumber = 1,
    kY00FieldNumber = 2,
    kX01FieldNumber = 3,
    kY01FieldNumber = 4,
    kX10FieldNumber = 5,
    kY10FieldNumber = 6,
    kX11FieldNumber = 7,
    kY11FieldNumber = 8,
    kTimeFieldNumber = 9,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
  };
  // required double x00 = 1;
  bool has_x00() const;
  private:
  bool _internal_has_x00() const;
  public:
  void clear_x00();
  double x00() const;
  void set_x00(double value);
  private:
  double _internal_x00() const;
  void _internal_set_x00(double value);
  public:

  // required double y00 = 2;
  bool has_y00() const;
  private:
  bool _internal_has_y00() const;
  public:
  void clear_y00();
  double y00() const;
  void set_y00(double value);
  private:
  double _internal_y00() const;
  void _internal_set_y00(double value);
  public:

  // required double x01 = 3;
  bool has_x01() const;
  private:
  bool _internal_has_x01() const;
  public:
  void clear_x01();
  double x01() const;
  void set_x01(double value);
  private:
  double _internal_x01() const;
  void _internal_set_x01(double value);
  public:

  // required double y01 = 4;
  bool has_y01() const;
  private:
  bool _internal_has_y01() const;
  public:
  void clear_y01();
  double y01() const;
  void set_y01(double value);
  private:
  double _internal_y01() const;
  void _internal_set_y01(double value);
  public:

  // required double x10 = 5;
  bool has_x10() const;
  private:
  bool _internal_has_x10() const;
  public:
  void clear_x10();
  double x10() const;
  void set_x10(double value);
  private:
  double _internal_x10() const;
  void _internal_set_x10(double value);
  public:

  // required double y10 = 6;
  bool has_y10() const;
  private:
  bool _internal_has_y10() const;
  public:
  void clear_y10();
  double y10() const;
  void set_y10(double value);
  private:
  double _internal_y10() const;
  void _internal_set_y10(double value);
  public:

  // required double x11 = 7;
  bool has_x11() const;
  private:
  bool _internal_has_x11() const;
  public:
  void clear_x11();
  double x11() const;
  void set_x11(double value);
  private:
  double _internal_x11() const;
  void _internal_set_x11(double value);
  public:

  // required double y11 = 8;
  bool has_y11() const;
  private:
  bool _internal_has_y11() const;
  public:
  void clear_y11();
  double y11() const;
  void set_y11(double value);
  private:
  double _internal_y11() const;
  void _internal_set_y11(double value);
  public:

  // required int64 time = 9;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 width = 10;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 height = 11;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Picinfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x00_;
  double y00_;
  double x01_;
  double y01_;
  double x10_;
  double y10_;
  double x11_;
  double y11_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_Header_2eproto;
};
// -------------------------------------------------------------------

class Metainfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Metainfo) */ {
 public:
  inline Metainfo() : Metainfo(nullptr) {}
  virtual ~Metainfo();
  explicit constexpr Metainfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metainfo(const Metainfo& from);
  Metainfo(Metainfo&& from) noexcept
    : Metainfo() {
    *this = ::std::move(from);
  }

  inline Metainfo& operator=(const Metainfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metainfo& operator=(Metainfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metainfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metainfo* internal_default_instance() {
    return reinterpret_cast<const Metainfo*>(
               &_Metainfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Metainfo& a, Metainfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Metainfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metainfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metainfo* New() const final {
    return CreateMaybeMessage<Metainfo>(nullptr);
  }

  Metainfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metainfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metainfo& from);
  void MergeFrom(const Metainfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metainfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Metainfo";
  }
  protected:
  explicit Metainfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Header_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIPFieldNumber = 1,
    kFrameNumberFieldNumber = 2,
    kDataSourceFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kDepthFieldNumber = 6,
  };
  // required bytes IP = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // required int32 FrameNumber = 2;
  bool has_framenumber() const;
  private:
  bool _internal_has_framenumber() const;
  public:
  void clear_framenumber();
  ::PROTOBUF_NAMESPACE_ID::int32 framenumber() const;
  void set_framenumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_framenumber() const;
  void _internal_set_framenumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 DataSource = 3;
  bool has_datasource() const;
  private:
  bool _internal_has_datasource() const;
  public:
  void clear_datasource();
  ::PROTOBUF_NAMESPACE_ID::int32 datasource() const;
  void set_datasource(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datasource() const;
  void _internal_set_datasource(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Width = 4;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Depth = 6;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
  void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
  void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Metainfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 framenumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 datasource_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_;
  friend struct ::TableStruct_Header_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeoPosition

// required double latitude = 1;
inline bool GeoPosition::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GeoPosition::has_latitude() const {
  return _internal_has_latitude();
}
inline void GeoPosition::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double GeoPosition::_internal_latitude() const {
  return latitude_;
}
inline double GeoPosition::latitude() const {
  // @@protoc_insertion_point(field_get:GeoPosition.latitude)
  return _internal_latitude();
}
inline void GeoPosition::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  latitude_ = value;
}
inline void GeoPosition::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:GeoPosition.latitude)
}

// required double longitude = 2;
inline bool GeoPosition::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GeoPosition::has_longitude() const {
  return _internal_has_longitude();
}
inline void GeoPosition::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double GeoPosition::_internal_longitude() const {
  return longitude_;
}
inline double GeoPosition::longitude() const {
  // @@protoc_insertion_point(field_get:GeoPosition.longitude)
  return _internal_longitude();
}
inline void GeoPosition::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_ = value;
}
inline void GeoPosition::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:GeoPosition.longitude)
}

// required double altitude = 3;
inline bool GeoPosition::_internal_has_altitude() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GeoPosition::has_altitude() const {
  return _internal_has_altitude();
}
inline void GeoPosition::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GeoPosition::_internal_altitude() const {
  return altitude_;
}
inline double GeoPosition::altitude() const {
  // @@protoc_insertion_point(field_get:GeoPosition.altitude)
  return _internal_altitude();
}
inline void GeoPosition::_internal_set_altitude(double value) {
  _has_bits_[0] |= 0x00000004u;
  altitude_ = value;
}
inline void GeoPosition::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:GeoPosition.altitude)
}

// optional int32 epsg = 4;
inline bool GeoPosition::_internal_has_epsg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GeoPosition::has_epsg() const {
  return _internal_has_epsg();
}
inline void GeoPosition::clear_epsg() {
  epsg_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeoPosition::_internal_epsg() const {
  return epsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeoPosition::epsg() const {
  // @@protoc_insertion_point(field_get:GeoPosition.epsg)
  return _internal_epsg();
}
inline void GeoPosition::_internal_set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  epsg_ = value;
}
inline void GeoPosition::set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epsg(value);
  // @@protoc_insertion_point(field_set:GeoPosition.epsg)
}

// -------------------------------------------------------------------

// Orientation

// required float roll = 1;
inline bool Orientation::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Orientation::has_roll() const {
  return _internal_has_roll();
}
inline void Orientation::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Orientation::_internal_roll() const {
  return roll_;
}
inline float Orientation::roll() const {
  // @@protoc_insertion_point(field_get:Orientation.roll)
  return _internal_roll();
}
inline void Orientation::_internal_set_roll(float value) {
  _has_bits_[0] |= 0x00000001u;
  roll_ = value;
}
inline void Orientation::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Orientation.roll)
}

// required float pitch = 2;
inline bool Orientation::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Orientation::has_pitch() const {
  return _internal_has_pitch();
}
inline void Orientation::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Orientation::_internal_pitch() const {
  return pitch_;
}
inline float Orientation::pitch() const {
  // @@protoc_insertion_point(field_get:Orientation.pitch)
  return _internal_pitch();
}
inline void Orientation::_internal_set_pitch(float value) {
  _has_bits_[0] |= 0x00000002u;
  pitch_ = value;
}
inline void Orientation::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Orientation.pitch)
}

// required float yaw = 3;
inline bool Orientation::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Orientation::has_yaw() const {
  return _internal_has_yaw();
}
inline void Orientation::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Orientation::_internal_yaw() const {
  return yaw_;
}
inline float Orientation::yaw() const {
  // @@protoc_insertion_point(field_get:Orientation.yaw)
  return _internal_yaw();
}
inline void Orientation::_internal_set_yaw(float value) {
  _has_bits_[0] |= 0x00000004u;
  yaw_ = value;
}
inline void Orientation::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Orientation.yaw)
}

// -------------------------------------------------------------------

// Vector3d

// required double X = 1;
inline bool Vector3d::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vector3d::has_x() const {
  return _internal_has_x();
}
inline void Vector3d::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vector3d::_internal_x() const {
  return x_;
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:Vector3d.X)
  return _internal_x();
}
inline void Vector3d::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Vector3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vector3d.X)
}

// required double Y = 2;
inline bool Vector3d::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vector3d::has_y() const {
  return _internal_has_y();
}
inline void Vector3d::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Vector3d::_internal_y() const {
  return y_;
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:Vector3d.Y)
  return _internal_y();
}
inline void Vector3d::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Vector3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vector3d.Y)
}

// required double Z = 3;
inline bool Vector3d::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vector3d::has_z() const {
  return _internal_has_z();
}
inline void Vector3d::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Vector3d::_internal_z() const {
  return z_;
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:Vector3d.Z)
  return _internal_z();
}
inline void Vector3d::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Vector3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Vector3d.Z)
}

// optional int32 epsg = 4;
inline bool Vector3d::_internal_has_epsg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vector3d::has_epsg() const {
  return _internal_has_epsg();
}
inline void Vector3d::clear_epsg() {
  epsg_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector3d::_internal_epsg() const {
  return epsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector3d::epsg() const {
  // @@protoc_insertion_point(field_get:Vector3d.epsg)
  return _internal_epsg();
}
inline void Vector3d::_internal_set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  epsg_ = value;
}
inline void Vector3d::set_epsg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epsg(value);
  // @@protoc_insertion_point(field_set:Vector3d.epsg)
}

// -------------------------------------------------------------------

// IntArray

// repeated int32 item = 1;
inline int IntArray::_internal_item_size() const {
  return item_.size();
}
inline int IntArray::item_size() const {
  return _internal_item_size();
}
inline void IntArray::clear_item() {
  item_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntArray::_internal_item(int index) const {
  return item_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntArray::item(int index) const {
  // @@protoc_insertion_point(field_get:IntArray.item)
  return _internal_item(index);
}
inline void IntArray::set_item(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  item_.Set(index, value);
  // @@protoc_insertion_point(field_set:IntArray.item)
}
inline void IntArray::_internal_add_item(::PROTOBUF_NAMESPACE_ID::int32 value) {
  item_.Add(value);
}
inline void IntArray::add_item(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_item(value);
  // @@protoc_insertion_point(field_add:IntArray.item)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntArray::_internal_item() const {
  return item_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IntArray::item() const {
  // @@protoc_insertion_point(field_list:IntArray.item)
  return _internal_item();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntArray::_internal_mutable_item() {
  return &item_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IntArray::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:IntArray.item)
  return _internal_mutable_item();
}

// -------------------------------------------------------------------

// FixedIntArray

// repeated sfixed32 item = 1 [packed = true];
inline int FixedIntArray::_internal_item_size() const {
  return item_.size();
}
inline int FixedIntArray::item_size() const {
  return _internal_item_size();
}
inline void FixedIntArray::clear_item() {
  item_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedIntArray::_internal_item(int index) const {
  return item_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FixedIntArray::item(int index) const {
  // @@protoc_insertion_point(field_get:FixedIntArray.item)
  return _internal_item(index);
}
inline void FixedIntArray::set_item(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  item_.Set(index, value);
  // @@protoc_insertion_point(field_set:FixedIntArray.item)
}
inline void FixedIntArray::_internal_add_item(::PROTOBUF_NAMESPACE_ID::int32 value) {
  item_.Add(value);
}
inline void FixedIntArray::add_item(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_item(value);
  // @@protoc_insertion_point(field_add:FixedIntArray.item)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FixedIntArray::_internal_item() const {
  return item_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FixedIntArray::item() const {
  // @@protoc_insertion_point(field_list:FixedIntArray.item)
  return _internal_item();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FixedIntArray::_internal_mutable_item() {
  return &item_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FixedIntArray::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:FixedIntArray.item)
  return _internal_mutable_item();
}

// -------------------------------------------------------------------

// Satellites

// optional bytes satellites = 1;
inline bool Satellites::_internal_has_satellites() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Satellites::has_satellites() const {
  return _internal_has_satellites();
}
inline void Satellites::clear_satellites() {
  satellites_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Satellites::satellites() const {
  // @@protoc_insertion_point(field_get:Satellites.satellites)
  return _internal_satellites();
}
inline void Satellites::set_satellites(const std::string& value) {
  _internal_set_satellites(value);
  // @@protoc_insertion_point(field_set:Satellites.satellites)
}
inline std::string* Satellites::mutable_satellites() {
  // @@protoc_insertion_point(field_mutable:Satellites.satellites)
  return _internal_mutable_satellites();
}
inline const std::string& Satellites::_internal_satellites() const {
  return satellites_.Get();
}
inline void Satellites::_internal_set_satellites(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  satellites_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Satellites::set_satellites(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  satellites_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Satellites.satellites)
}
inline void Satellites::set_satellites(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  satellites_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Satellites.satellites)
}
inline void Satellites::set_satellites(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  satellites_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Satellites.satellites)
}
inline std::string* Satellites::_internal_mutable_satellites() {
  _has_bits_[0] |= 0x00000001u;
  return satellites_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Satellites::release_satellites() {
  // @@protoc_insertion_point(field_release:Satellites.satellites)
  if (!_internal_has_satellites()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return satellites_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Satellites::set_allocated_satellites(std::string* satellites) {
  if (satellites != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  satellites_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), satellites,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Satellites.satellites)
}

// optional bytes potentiallySatellites = 2;
inline bool Satellites::_internal_has_potentiallysatellites() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Satellites::has_potentiallysatellites() const {
  return _internal_has_potentiallysatellites();
}
inline void Satellites::clear_potentiallysatellites() {
  potentiallysatellites_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Satellites::potentiallysatellites() const {
  // @@protoc_insertion_point(field_get:Satellites.potentiallySatellites)
  return _internal_potentiallysatellites();
}
inline void Satellites::set_potentiallysatellites(const std::string& value) {
  _internal_set_potentiallysatellites(value);
  // @@protoc_insertion_point(field_set:Satellites.potentiallySatellites)
}
inline std::string* Satellites::mutable_potentiallysatellites() {
  // @@protoc_insertion_point(field_mutable:Satellites.potentiallySatellites)
  return _internal_mutable_potentiallysatellites();
}
inline const std::string& Satellites::_internal_potentiallysatellites() const {
  return potentiallysatellites_.Get();
}
inline void Satellites::_internal_set_potentiallysatellites(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  potentiallysatellites_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Satellites::set_potentiallysatellites(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  potentiallysatellites_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Satellites.potentiallySatellites)
}
inline void Satellites::set_potentiallysatellites(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  potentiallysatellites_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Satellites.potentiallySatellites)
}
inline void Satellites::set_potentiallysatellites(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  potentiallysatellites_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Satellites.potentiallySatellites)
}
inline std::string* Satellites::_internal_mutable_potentiallysatellites() {
  _has_bits_[0] |= 0x00000002u;
  return potentiallysatellites_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Satellites::release_potentiallysatellites() {
  // @@protoc_insertion_point(field_release:Satellites.potentiallySatellites)
  if (!_internal_has_potentiallysatellites()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return potentiallysatellites_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Satellites::set_allocated_potentiallysatellites(std::string* potentiallysatellites) {
  if (potentiallysatellites != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  potentiallysatellites_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), potentiallysatellites,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Satellites.potentiallySatellites)
}

// -------------------------------------------------------------------

// PseudoCoordinate

// optional .FixedIntArray pseudoDistance = 1;
inline bool PseudoCoordinate::_internal_has_pseudodistance() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pseudodistance_ != nullptr);
  return value;
}
inline bool PseudoCoordinate::has_pseudodistance() const {
  return _internal_has_pseudodistance();
}
inline void PseudoCoordinate::clear_pseudodistance() {
  if (pseudodistance_ != nullptr) pseudodistance_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::FixedIntArray& PseudoCoordinate::_internal_pseudodistance() const {
  const ::FixedIntArray* p = pseudodistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::FixedIntArray&>(
      ::_FixedIntArray_default_instance_);
}
inline const ::FixedIntArray& PseudoCoordinate::pseudodistance() const {
  // @@protoc_insertion_point(field_get:PseudoCoordinate.pseudoDistance)
  return _internal_pseudodistance();
}
inline void PseudoCoordinate::unsafe_arena_set_allocated_pseudodistance(
    ::FixedIntArray* pseudodistance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pseudodistance_);
  }
  pseudodistance_ = pseudodistance;
  if (pseudodistance) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PseudoCoordinate.pseudoDistance)
}
inline ::FixedIntArray* PseudoCoordinate::release_pseudodistance() {
  _has_bits_[0] &= ~0x00000001u;
  ::FixedIntArray* temp = pseudodistance_;
  pseudodistance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FixedIntArray* PseudoCoordinate::unsafe_arena_release_pseudodistance() {
  // @@protoc_insertion_point(field_release:PseudoCoordinate.pseudoDistance)
  _has_bits_[0] &= ~0x00000001u;
  ::FixedIntArray* temp = pseudodistance_;
  pseudodistance_ = nullptr;
  return temp;
}
inline ::FixedIntArray* PseudoCoordinate::_internal_mutable_pseudodistance() {
  _has_bits_[0] |= 0x00000001u;
  if (pseudodistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::FixedIntArray>(GetArena());
    pseudodistance_ = p;
  }
  return pseudodistance_;
}
inline ::FixedIntArray* PseudoCoordinate::mutable_pseudodistance() {
  // @@protoc_insertion_point(field_mutable:PseudoCoordinate.pseudoDistance)
  return _internal_mutable_pseudodistance();
}
inline void PseudoCoordinate::set_allocated_pseudodistance(::FixedIntArray* pseudodistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pseudodistance_;
  }
  if (pseudodistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pseudodistance);
    if (message_arena != submessage_arena) {
      pseudodistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pseudodistance, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pseudodistance_ = pseudodistance;
  // @@protoc_insertion_point(field_set_allocated:PseudoCoordinate.pseudoDistance)
}

// optional .FixedIntArray pseudoVelocity = 2;
inline bool PseudoCoordinate::_internal_has_pseudovelocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pseudovelocity_ != nullptr);
  return value;
}
inline bool PseudoCoordinate::has_pseudovelocity() const {
  return _internal_has_pseudovelocity();
}
inline void PseudoCoordinate::clear_pseudovelocity() {
  if (pseudovelocity_ != nullptr) pseudovelocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::FixedIntArray& PseudoCoordinate::_internal_pseudovelocity() const {
  const ::FixedIntArray* p = pseudovelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::FixedIntArray&>(
      ::_FixedIntArray_default_instance_);
}
inline const ::FixedIntArray& PseudoCoordinate::pseudovelocity() const {
  // @@protoc_insertion_point(field_get:PseudoCoordinate.pseudoVelocity)
  return _internal_pseudovelocity();
}
inline void PseudoCoordinate::unsafe_arena_set_allocated_pseudovelocity(
    ::FixedIntArray* pseudovelocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pseudovelocity_);
  }
  pseudovelocity_ = pseudovelocity;
  if (pseudovelocity) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PseudoCoordinate.pseudoVelocity)
}
inline ::FixedIntArray* PseudoCoordinate::release_pseudovelocity() {
  _has_bits_[0] &= ~0x00000002u;
  ::FixedIntArray* temp = pseudovelocity_;
  pseudovelocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FixedIntArray* PseudoCoordinate::unsafe_arena_release_pseudovelocity() {
  // @@protoc_insertion_point(field_release:PseudoCoordinate.pseudoVelocity)
  _has_bits_[0] &= ~0x00000002u;
  ::FixedIntArray* temp = pseudovelocity_;
  pseudovelocity_ = nullptr;
  return temp;
}
inline ::FixedIntArray* PseudoCoordinate::_internal_mutable_pseudovelocity() {
  _has_bits_[0] |= 0x00000002u;
  if (pseudovelocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::FixedIntArray>(GetArena());
    pseudovelocity_ = p;
  }
  return pseudovelocity_;
}
inline ::FixedIntArray* PseudoCoordinate::mutable_pseudovelocity() {
  // @@protoc_insertion_point(field_mutable:PseudoCoordinate.pseudoVelocity)
  return _internal_mutable_pseudovelocity();
}
inline void PseudoCoordinate::set_allocated_pseudovelocity(::FixedIntArray* pseudovelocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pseudovelocity_;
  }
  if (pseudovelocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pseudovelocity);
    if (message_arena != submessage_arena) {
      pseudovelocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pseudovelocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pseudovelocity_ = pseudovelocity;
  // @@protoc_insertion_point(field_set_allocated:PseudoCoordinate.pseudoVelocity)
}

// optional .FixedIntArray debugInfo = 3;
inline bool PseudoCoordinate::_internal_has_debuginfo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || debuginfo_ != nullptr);
  return value;
}
inline bool PseudoCoordinate::has_debuginfo() const {
  return _internal_has_debuginfo();
}
inline void PseudoCoordinate::clear_debuginfo() {
  if (debuginfo_ != nullptr) debuginfo_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::FixedIntArray& PseudoCoordinate::_internal_debuginfo() const {
  const ::FixedIntArray* p = debuginfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::FixedIntArray&>(
      ::_FixedIntArray_default_instance_);
}
inline const ::FixedIntArray& PseudoCoordinate::debuginfo() const {
  // @@protoc_insertion_point(field_get:PseudoCoordinate.debugInfo)
  return _internal_debuginfo();
}
inline void PseudoCoordinate::unsafe_arena_set_allocated_debuginfo(
    ::FixedIntArray* debuginfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debuginfo_);
  }
  debuginfo_ = debuginfo;
  if (debuginfo) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PseudoCoordinate.debugInfo)
}
inline ::FixedIntArray* PseudoCoordinate::release_debuginfo() {
  _has_bits_[0] &= ~0x00000004u;
  ::FixedIntArray* temp = debuginfo_;
  debuginfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FixedIntArray* PseudoCoordinate::unsafe_arena_release_debuginfo() {
  // @@protoc_insertion_point(field_release:PseudoCoordinate.debugInfo)
  _has_bits_[0] &= ~0x00000004u;
  ::FixedIntArray* temp = debuginfo_;
  debuginfo_ = nullptr;
  return temp;
}
inline ::FixedIntArray* PseudoCoordinate::_internal_mutable_debuginfo() {
  _has_bits_[0] |= 0x00000004u;
  if (debuginfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::FixedIntArray>(GetArena());
    debuginfo_ = p;
  }
  return debuginfo_;
}
inline ::FixedIntArray* PseudoCoordinate::mutable_debuginfo() {
  // @@protoc_insertion_point(field_mutable:PseudoCoordinate.debugInfo)
  return _internal_mutable_debuginfo();
}
inline void PseudoCoordinate::set_allocated_debuginfo(::FixedIntArray* debuginfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete debuginfo_;
  }
  if (debuginfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debuginfo);
    if (message_arena != submessage_arena) {
      debuginfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debuginfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  debuginfo_ = debuginfo;
  // @@protoc_insertion_point(field_set_allocated:PseudoCoordinate.debugInfo)
}

// -------------------------------------------------------------------

// Navigation

// optional float gpsCourse = 1;
inline bool Navigation::_internal_has_gpscourse() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Navigation::has_gpscourse() const {
  return _internal_has_gpscourse();
}
inline void Navigation::clear_gpscourse() {
  gpscourse_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float Navigation::_internal_gpscourse() const {
  return gpscourse_;
}
inline float Navigation::gpscourse() const {
  // @@protoc_insertion_point(field_get:Navigation.gpsCourse)
  return _internal_gpscourse();
}
inline void Navigation::_internal_set_gpscourse(float value) {
  _has_bits_[0] |= 0x00000080u;
  gpscourse_ = value;
}
inline void Navigation::set_gpscourse(float value) {
  _internal_set_gpscourse(value);
  // @@protoc_insertion_point(field_set:Navigation.gpsCourse)
}

// optional float velocity = 2;
inline bool Navigation::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Navigation::has_velocity() const {
  return _internal_has_velocity();
}
inline void Navigation::clear_velocity() {
  velocity_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Navigation::_internal_velocity() const {
  return velocity_;
}
inline float Navigation::velocity() const {
  // @@protoc_insertion_point(field_get:Navigation.velocity)
  return _internal_velocity();
}
inline void Navigation::_internal_set_velocity(float value) {
  _has_bits_[0] |= 0x00000100u;
  velocity_ = value;
}
inline void Navigation::set_velocity(float value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:Navigation.velocity)
}

// required int64 timestamp = 3;
inline bool Navigation::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Navigation::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Navigation::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Navigation::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Navigation::timestamp() const {
  // @@protoc_insertion_point(field_get:Navigation.timestamp)
  return _internal_timestamp();
}
inline void Navigation::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  timestamp_ = value;
}
inline void Navigation::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Navigation.timestamp)
}

// optional string name = 4;
inline bool Navigation::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Navigation::has_name() const {
  return _internal_has_name();
}
inline void Navigation::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Navigation::name() const {
  // @@protoc_insertion_point(field_get:Navigation.name)
  return _internal_name();
}
inline void Navigation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Navigation.name)
}
inline std::string* Navigation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Navigation.name)
  return _internal_mutable_name();
}
inline const std::string& Navigation::_internal_name() const {
  return name_.Get();
}
inline void Navigation::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Navigation::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Navigation.name)
}
inline void Navigation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Navigation.name)
}
inline void Navigation::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Navigation.name)
}
inline std::string* Navigation::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Navigation::release_name() {
  // @@protoc_insertion_point(field_release:Navigation.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Navigation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Navigation.name)
}

// optional .GeoPosition geoPosition = 5;
inline bool Navigation::_internal_has_geoposition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || geoposition_ != nullptr);
  return value;
}
inline bool Navigation::has_geoposition() const {
  return _internal_has_geoposition();
}
inline void Navigation::clear_geoposition() {
  if (geoposition_ != nullptr) geoposition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::GeoPosition& Navigation::_internal_geoposition() const {
  const ::GeoPosition* p = geoposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::GeoPosition&>(
      ::_GeoPosition_default_instance_);
}
inline const ::GeoPosition& Navigation::geoposition() const {
  // @@protoc_insertion_point(field_get:Navigation.geoPosition)
  return _internal_geoposition();
}
inline void Navigation::unsafe_arena_set_allocated_geoposition(
    ::GeoPosition* geoposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geoposition_);
  }
  geoposition_ = geoposition;
  if (geoposition) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Navigation.geoPosition)
}
inline ::GeoPosition* Navigation::release_geoposition() {
  _has_bits_[0] &= ~0x00000002u;
  ::GeoPosition* temp = geoposition_;
  geoposition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GeoPosition* Navigation::unsafe_arena_release_geoposition() {
  // @@protoc_insertion_point(field_release:Navigation.geoPosition)
  _has_bits_[0] &= ~0x00000002u;
  ::GeoPosition* temp = geoposition_;
  geoposition_ = nullptr;
  return temp;
}
inline ::GeoPosition* Navigation::_internal_mutable_geoposition() {
  _has_bits_[0] |= 0x00000002u;
  if (geoposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::GeoPosition>(GetArena());
    geoposition_ = p;
  }
  return geoposition_;
}
inline ::GeoPosition* Navigation::mutable_geoposition() {
  // @@protoc_insertion_point(field_mutable:Navigation.geoPosition)
  return _internal_mutable_geoposition();
}
inline void Navigation::set_allocated_geoposition(::GeoPosition* geoposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geoposition_;
  }
  if (geoposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geoposition);
    if (message_arena != submessage_arena) {
      geoposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geoposition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  geoposition_ = geoposition;
  // @@protoc_insertion_point(field_set_allocated:Navigation.geoPosition)
}

// optional .Orientation orientation = 6;
inline bool Navigation::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool Navigation::has_orientation() const {
  return _internal_has_orientation();
}
inline void Navigation::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Orientation& Navigation::_internal_orientation() const {
  const ::Orientation* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Orientation&>(
      ::_Orientation_default_instance_);
}
inline const ::Orientation& Navigation::orientation() const {
  // @@protoc_insertion_point(field_get:Navigation.orientation)
  return _internal_orientation();
}
inline void Navigation::unsafe_arena_set_allocated_orientation(
    ::Orientation* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Navigation.orientation)
}
inline ::Orientation* Navigation::release_orientation() {
  _has_bits_[0] &= ~0x00000004u;
  ::Orientation* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orientation* Navigation::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:Navigation.orientation)
  _has_bits_[0] &= ~0x00000004u;
  ::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::Orientation* Navigation::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000004u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orientation>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::Orientation* Navigation::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:Navigation.orientation)
  return _internal_mutable_orientation();
}
inline void Navigation::set_allocated_orientation(::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:Navigation.orientation)
}

// optional .Vector3d XYZPosition = 7;
inline bool Navigation::_internal_has_xyzposition() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || xyzposition_ != nullptr);
  return value;
}
inline bool Navigation::has_xyzposition() const {
  return _internal_has_xyzposition();
}
inline void Navigation::clear_xyzposition() {
  if (xyzposition_ != nullptr) xyzposition_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Vector3d& Navigation::_internal_xyzposition() const {
  const ::Vector3d* p = xyzposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3d&>(
      ::_Vector3d_default_instance_);
}
inline const ::Vector3d& Navigation::xyzposition() const {
  // @@protoc_insertion_point(field_get:Navigation.XYZPosition)
  return _internal_xyzposition();
}
inline void Navigation::unsafe_arena_set_allocated_xyzposition(
    ::Vector3d* xyzposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xyzposition_);
  }
  xyzposition_ = xyzposition;
  if (xyzposition) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Navigation.XYZPosition)
}
inline ::Vector3d* Navigation::release_xyzposition() {
  _has_bits_[0] &= ~0x00000008u;
  ::Vector3d* temp = xyzposition_;
  xyzposition_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Vector3d* Navigation::unsafe_arena_release_xyzposition() {
  // @@protoc_insertion_point(field_release:Navigation.XYZPosition)
  _has_bits_[0] &= ~0x00000008u;
  ::Vector3d* temp = xyzposition_;
  xyzposition_ = nullptr;
  return temp;
}
inline ::Vector3d* Navigation::_internal_mutable_xyzposition() {
  _has_bits_[0] |= 0x00000008u;
  if (xyzposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3d>(GetArena());
    xyzposition_ = p;
  }
  return xyzposition_;
}
inline ::Vector3d* Navigation::mutable_xyzposition() {
  // @@protoc_insertion_point(field_mutable:Navigation.XYZPosition)
  return _internal_mutable_xyzposition();
}
inline void Navigation::set_allocated_xyzposition(::Vector3d* xyzposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete xyzposition_;
  }
  if (xyzposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(xyzposition);
    if (message_arena != submessage_arena) {
      xyzposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xyzposition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  xyzposition_ = xyzposition;
  // @@protoc_insertion_point(field_set_allocated:Navigation.XYZPosition)
}

// optional .Vector3d XYZSpeed = 8;
inline bool Navigation::_internal_has_xyzspeed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || xyzspeed_ != nullptr);
  return value;
}
inline bool Navigation::has_xyzspeed() const {
  return _internal_has_xyzspeed();
}
inline void Navigation::clear_xyzspeed() {
  if (xyzspeed_ != nullptr) xyzspeed_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Vector3d& Navigation::_internal_xyzspeed() const {
  const ::Vector3d* p = xyzspeed_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3d&>(
      ::_Vector3d_default_instance_);
}
inline const ::Vector3d& Navigation::xyzspeed() const {
  // @@protoc_insertion_point(field_get:Navigation.XYZSpeed)
  return _internal_xyzspeed();
}
inline void Navigation::unsafe_arena_set_allocated_xyzspeed(
    ::Vector3d* xyzspeed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xyzspeed_);
  }
  xyzspeed_ = xyzspeed;
  if (xyzspeed) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Navigation.XYZSpeed)
}
inline ::Vector3d* Navigation::release_xyzspeed() {
  _has_bits_[0] &= ~0x00000010u;
  ::Vector3d* temp = xyzspeed_;
  xyzspeed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Vector3d* Navigation::unsafe_arena_release_xyzspeed() {
  // @@protoc_insertion_point(field_release:Navigation.XYZSpeed)
  _has_bits_[0] &= ~0x00000010u;
  ::Vector3d* temp = xyzspeed_;
  xyzspeed_ = nullptr;
  return temp;
}
inline ::Vector3d* Navigation::_internal_mutable_xyzspeed() {
  _has_bits_[0] |= 0x00000010u;
  if (xyzspeed_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3d>(GetArena());
    xyzspeed_ = p;
  }
  return xyzspeed_;
}
inline ::Vector3d* Navigation::mutable_xyzspeed() {
  // @@protoc_insertion_point(field_mutable:Navigation.XYZSpeed)
  return _internal_mutable_xyzspeed();
}
inline void Navigation::set_allocated_xyzspeed(::Vector3d* xyzspeed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete xyzspeed_;
  }
  if (xyzspeed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(xyzspeed);
    if (message_arena != submessage_arena) {
      xyzspeed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xyzspeed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  xyzspeed_ = xyzspeed;
  // @@protoc_insertion_point(field_set_allocated:Navigation.XYZSpeed)
}

// optional int32 tow = 9;
inline bool Navigation::_internal_has_tow() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Navigation::has_tow() const {
  return _internal_has_tow();
}
inline void Navigation::clear_tow() {
  tow_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Navigation::_internal_tow() const {
  return tow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Navigation::tow() const {
  // @@protoc_insertion_point(field_get:Navigation.tow)
  return _internal_tow();
}
inline void Navigation::_internal_set_tow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  tow_ = value;
}
inline void Navigation::set_tow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tow(value);
  // @@protoc_insertion_point(field_set:Navigation.tow)
}

// optional int32 debug = 10;
inline bool Navigation::_internal_has_debug() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Navigation::has_debug() const {
  return _internal_has_debug();
}
inline void Navigation::clear_debug() {
  debug_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Navigation::_internal_debug() const {
  return debug_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Navigation::debug() const {
  // @@protoc_insertion_point(field_get:Navigation.debug)
  return _internal_debug();
}
inline void Navigation::_internal_set_debug(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  debug_ = value;
}
inline void Navigation::set_debug(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_debug(value);
  // @@protoc_insertion_point(field_set:Navigation.debug)
}

// optional float quality = 11;
inline bool Navigation::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Navigation::has_quality() const {
  return _internal_has_quality();
}
inline void Navigation::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float Navigation::_internal_quality() const {
  return quality_;
}
inline float Navigation::quality() const {
  // @@protoc_insertion_point(field_get:Navigation.quality)
  return _internal_quality();
}
inline void Navigation::_internal_set_quality(float value) {
  _has_bits_[0] |= 0x00001000u;
  quality_ = value;
}
inline void Navigation::set_quality(float value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:Navigation.quality)
}

// optional .Satellites satellites = 12;
inline bool Navigation::_internal_has_satellites() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || satellites_ != nullptr);
  return value;
}
inline bool Navigation::has_satellites() const {
  return _internal_has_satellites();
}
inline void Navigation::clear_satellites() {
  if (satellites_ != nullptr) satellites_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Satellites& Navigation::_internal_satellites() const {
  const ::Satellites* p = satellites_;
  return p != nullptr ? *p : reinterpret_cast<const ::Satellites&>(
      ::_Satellites_default_instance_);
}
inline const ::Satellites& Navigation::satellites() const {
  // @@protoc_insertion_point(field_get:Navigation.satellites)
  return _internal_satellites();
}
inline void Navigation::unsafe_arena_set_allocated_satellites(
    ::Satellites* satellites) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(satellites_);
  }
  satellites_ = satellites;
  if (satellites) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Navigation.satellites)
}
inline ::Satellites* Navigation::release_satellites() {
  _has_bits_[0] &= ~0x00000020u;
  ::Satellites* temp = satellites_;
  satellites_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Satellites* Navigation::unsafe_arena_release_satellites() {
  // @@protoc_insertion_point(field_release:Navigation.satellites)
  _has_bits_[0] &= ~0x00000020u;
  ::Satellites* temp = satellites_;
  satellites_ = nullptr;
  return temp;
}
inline ::Satellites* Navigation::_internal_mutable_satellites() {
  _has_bits_[0] |= 0x00000020u;
  if (satellites_ == nullptr) {
    auto* p = CreateMaybeMessage<::Satellites>(GetArena());
    satellites_ = p;
  }
  return satellites_;
}
inline ::Satellites* Navigation::mutable_satellites() {
  // @@protoc_insertion_point(field_mutable:Navigation.satellites)
  return _internal_mutable_satellites();
}
inline void Navigation::set_allocated_satellites(::Satellites* satellites) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete satellites_;
  }
  if (satellites) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(satellites);
    if (message_arena != submessage_arena) {
      satellites = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, satellites, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  satellites_ = satellites;
  // @@protoc_insertion_point(field_set_allocated:Navigation.satellites)
}

// optional .PseudoCoordinate pseudoCoordinate = 13;
inline bool Navigation::_internal_has_pseudocoordinate() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || pseudocoordinate_ != nullptr);
  return value;
}
inline bool Navigation::has_pseudocoordinate() const {
  return _internal_has_pseudocoordinate();
}
inline void Navigation::clear_pseudocoordinate() {
  if (pseudocoordinate_ != nullptr) pseudocoordinate_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::PseudoCoordinate& Navigation::_internal_pseudocoordinate() const {
  const ::PseudoCoordinate* p = pseudocoordinate_;
  return p != nullptr ? *p : reinterpret_cast<const ::PseudoCoordinate&>(
      ::_PseudoCoordinate_default_instance_);
}
inline const ::PseudoCoordinate& Navigation::pseudocoordinate() const {
  // @@protoc_insertion_point(field_get:Navigation.pseudoCoordinate)
  return _internal_pseudocoordinate();
}
inline void Navigation::unsafe_arena_set_allocated_pseudocoordinate(
    ::PseudoCoordinate* pseudocoordinate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pseudocoordinate_);
  }
  pseudocoordinate_ = pseudocoordinate;
  if (pseudocoordinate) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Navigation.pseudoCoordinate)
}
inline ::PseudoCoordinate* Navigation::release_pseudocoordinate() {
  _has_bits_[0] &= ~0x00000040u;
  ::PseudoCoordinate* temp = pseudocoordinate_;
  pseudocoordinate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PseudoCoordinate* Navigation::unsafe_arena_release_pseudocoordinate() {
  // @@protoc_insertion_point(field_release:Navigation.pseudoCoordinate)
  _has_bits_[0] &= ~0x00000040u;
  ::PseudoCoordinate* temp = pseudocoordinate_;
  pseudocoordinate_ = nullptr;
  return temp;
}
inline ::PseudoCoordinate* Navigation::_internal_mutable_pseudocoordinate() {
  _has_bits_[0] |= 0x00000040u;
  if (pseudocoordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::PseudoCoordinate>(GetArena());
    pseudocoordinate_ = p;
  }
  return pseudocoordinate_;
}
inline ::PseudoCoordinate* Navigation::mutable_pseudocoordinate() {
  // @@protoc_insertion_point(field_mutable:Navigation.pseudoCoordinate)
  return _internal_mutable_pseudocoordinate();
}
inline void Navigation::set_allocated_pseudocoordinate(::PseudoCoordinate* pseudocoordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pseudocoordinate_;
  }
  if (pseudocoordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pseudocoordinate);
    if (message_arena != submessage_arena) {
      pseudocoordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pseudocoordinate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  pseudocoordinate_ = pseudocoordinate;
  // @@protoc_insertion_point(field_set_allocated:Navigation.pseudoCoordinate)
}

// optional double aerialAltitude = 14;
inline bool Navigation::_internal_has_aerialaltitude() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Navigation::has_aerialaltitude() const {
  return _internal_has_aerialaltitude();
}
inline void Navigation::clear_aerialaltitude() {
  aerialaltitude_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double Navigation::_internal_aerialaltitude() const {
  return aerialaltitude_;
}
inline double Navigation::aerialaltitude() const {
  // @@protoc_insertion_point(field_get:Navigation.aerialAltitude)
  return _internal_aerialaltitude();
}
inline void Navigation::_internal_set_aerialaltitude(double value) {
  _has_bits_[0] |= 0x00004000u;
  aerialaltitude_ = value;
}
inline void Navigation::set_aerialaltitude(double value) {
  _internal_set_aerialaltitude(value);
  // @@protoc_insertion_point(field_set:Navigation.aerialAltitude)
}

// optional int32 strobeMarker = 15;
inline bool Navigation::_internal_has_strobemarker() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Navigation::has_strobemarker() const {
  return _internal_has_strobemarker();
}
inline void Navigation::clear_strobemarker() {
  strobemarker_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Navigation::_internal_strobemarker() const {
  return strobemarker_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Navigation::strobemarker() const {
  // @@protoc_insertion_point(field_get:Navigation.strobeMarker)
  return _internal_strobemarker();
}
inline void Navigation::_internal_set_strobemarker(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  strobemarker_ = value;
}
inline void Navigation::set_strobemarker(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strobemarker(value);
  // @@protoc_insertion_point(field_set:Navigation.strobeMarker)
}

// -------------------------------------------------------------------

// GeoData

// repeated .Navigation navigations = 1;
inline int GeoData::_internal_navigations_size() const {
  return navigations_.size();
}
inline int GeoData::navigations_size() const {
  return _internal_navigations_size();
}
inline void GeoData::clear_navigations() {
  navigations_.Clear();
}
inline ::Navigation* GeoData::mutable_navigations(int index) {
  // @@protoc_insertion_point(field_mutable:GeoData.navigations)
  return navigations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Navigation >*
GeoData::mutable_navigations() {
  // @@protoc_insertion_point(field_mutable_list:GeoData.navigations)
  return &navigations_;
}
inline const ::Navigation& GeoData::_internal_navigations(int index) const {
  return navigations_.Get(index);
}
inline const ::Navigation& GeoData::navigations(int index) const {
  // @@protoc_insertion_point(field_get:GeoData.navigations)
  return _internal_navigations(index);
}
inline ::Navigation* GeoData::_internal_add_navigations() {
  return navigations_.Add();
}
inline ::Navigation* GeoData::add_navigations() {
  // @@protoc_insertion_point(field_add:GeoData.navigations)
  return _internal_add_navigations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Navigation >&
GeoData::navigations() const {
  // @@protoc_insertion_point(field_list:GeoData.navigations)
  return navigations_;
}

// -------------------------------------------------------------------

// AngleDimension

// required float width = 1;
inline bool AngleDimension::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AngleDimension::has_width() const {
  return _internal_has_width();
}
inline void AngleDimension::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float AngleDimension::_internal_width() const {
  return width_;
}
inline float AngleDimension::width() const {
  // @@protoc_insertion_point(field_get:AngleDimension.width)
  return _internal_width();
}
inline void AngleDimension::_internal_set_width(float value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void AngleDimension::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:AngleDimension.width)
}

// required float height = 2;
inline bool AngleDimension::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AngleDimension::has_height() const {
  return _internal_has_height();
}
inline void AngleDimension::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float AngleDimension::_internal_height() const {
  return height_;
}
inline float AngleDimension::height() const {
  // @@protoc_insertion_point(field_get:AngleDimension.height)
  return _internal_height();
}
inline void AngleDimension::_internal_set_height(float value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void AngleDimension::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:AngleDimension.height)
}

// -------------------------------------------------------------------

// FrameDescription

// required .GeoData geoData = 1;
inline bool FrameDescription::_internal_has_geodata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || geodata_ != nullptr);
  return value;
}
inline bool FrameDescription::has_geodata() const {
  return _internal_has_geodata();
}
inline void FrameDescription::clear_geodata() {
  if (geodata_ != nullptr) geodata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::GeoData& FrameDescription::_internal_geodata() const {
  const ::GeoData* p = geodata_;
  return p != nullptr ? *p : reinterpret_cast<const ::GeoData&>(
      ::_GeoData_default_instance_);
}
inline const ::GeoData& FrameDescription::geodata() const {
  // @@protoc_insertion_point(field_get:FrameDescription.geoData)
  return _internal_geodata();
}
inline void FrameDescription::unsafe_arena_set_allocated_geodata(
    ::GeoData* geodata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geodata_);
  }
  geodata_ = geodata;
  if (geodata) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FrameDescription.geoData)
}
inline ::GeoData* FrameDescription::release_geodata() {
  _has_bits_[0] &= ~0x00000004u;
  ::GeoData* temp = geodata_;
  geodata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GeoData* FrameDescription::unsafe_arena_release_geodata() {
  // @@protoc_insertion_point(field_release:FrameDescription.geoData)
  _has_bits_[0] &= ~0x00000004u;
  ::GeoData* temp = geodata_;
  geodata_ = nullptr;
  return temp;
}
inline ::GeoData* FrameDescription::_internal_mutable_geodata() {
  _has_bits_[0] |= 0x00000004u;
  if (geodata_ == nullptr) {
    auto* p = CreateMaybeMessage<::GeoData>(GetArena());
    geodata_ = p;
  }
  return geodata_;
}
inline ::GeoData* FrameDescription::mutable_geodata() {
  // @@protoc_insertion_point(field_mutable:FrameDescription.geoData)
  return _internal_mutable_geodata();
}
inline void FrameDescription::set_allocated_geodata(::GeoData* geodata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geodata_;
  }
  if (geodata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geodata);
    if (message_arena != submessage_arena) {
      geodata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geodata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  geodata_ = geodata;
  // @@protoc_insertion_point(field_set_allocated:FrameDescription.geoData)
}

// optional .AngleDimension angleDimension = 2;
inline bool FrameDescription::_internal_has_angledimension() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || angledimension_ != nullptr);
  return value;
}
inline bool FrameDescription::has_angledimension() const {
  return _internal_has_angledimension();
}
inline void FrameDescription::clear_angledimension() {
  if (angledimension_ != nullptr) angledimension_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::AngleDimension& FrameDescription::_internal_angledimension() const {
  const ::AngleDimension* p = angledimension_;
  return p != nullptr ? *p : reinterpret_cast<const ::AngleDimension&>(
      ::_AngleDimension_default_instance_);
}
inline const ::AngleDimension& FrameDescription::angledimension() const {
  // @@protoc_insertion_point(field_get:FrameDescription.angleDimension)
  return _internal_angledimension();
}
inline void FrameDescription::unsafe_arena_set_allocated_angledimension(
    ::AngleDimension* angledimension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angledimension_);
  }
  angledimension_ = angledimension;
  if (angledimension) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FrameDescription.angleDimension)
}
inline ::AngleDimension* FrameDescription::release_angledimension() {
  _has_bits_[0] &= ~0x00000008u;
  ::AngleDimension* temp = angledimension_;
  angledimension_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AngleDimension* FrameDescription::unsafe_arena_release_angledimension() {
  // @@protoc_insertion_point(field_release:FrameDescription.angleDimension)
  _has_bits_[0] &= ~0x00000008u;
  ::AngleDimension* temp = angledimension_;
  angledimension_ = nullptr;
  return temp;
}
inline ::AngleDimension* FrameDescription::_internal_mutable_angledimension() {
  _has_bits_[0] |= 0x00000008u;
  if (angledimension_ == nullptr) {
    auto* p = CreateMaybeMessage<::AngleDimension>(GetArena());
    angledimension_ = p;
  }
  return angledimension_;
}
inline ::AngleDimension* FrameDescription::mutable_angledimension() {
  // @@protoc_insertion_point(field_mutable:FrameDescription.angleDimension)
  return _internal_mutable_angledimension();
}
inline void FrameDescription::set_allocated_angledimension(::AngleDimension* angledimension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete angledimension_;
  }
  if (angledimension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(angledimension);
    if (message_arena != submessage_arena) {
      angledimension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angledimension, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  angledimension_ = angledimension;
  // @@protoc_insertion_point(field_set_allocated:FrameDescription.angleDimension)
}

// optional .CameraTypes cameraType = 3 [default = UnknownCamera];
inline bool FrameDescription::_internal_has_cameratype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FrameDescription::has_cameratype() const {
  return _internal_has_cameratype();
}
inline void FrameDescription::clear_cameratype() {
  cameratype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::CameraTypes FrameDescription::_internal_cameratype() const {
  return static_cast< ::CameraTypes >(cameratype_);
}
inline ::CameraTypes FrameDescription::cameratype() const {
  // @@protoc_insertion_point(field_get:FrameDescription.cameraType)
  return _internal_cameratype();
}
inline void FrameDescription::_internal_set_cameratype(::CameraTypes value) {
  assert(::CameraTypes_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  cameratype_ = value;
}
inline void FrameDescription::set_cameratype(::CameraTypes value) {
  _internal_set_cameratype(value);
  // @@protoc_insertion_point(field_set:FrameDescription.cameraType)
}

// optional .LensTypes lensType = 4 [default = UnknownLens];
inline bool FrameDescription::_internal_has_lenstype() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FrameDescription::has_lenstype() const {
  return _internal_has_lenstype();
}
inline void FrameDescription::clear_lenstype() {
  lenstype_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::LensTypes FrameDescription::_internal_lenstype() const {
  return static_cast< ::LensTypes >(lenstype_);
}
inline ::LensTypes FrameDescription::lenstype() const {
  // @@protoc_insertion_point(field_get:FrameDescription.lensType)
  return _internal_lenstype();
}
inline void FrameDescription::_internal_set_lenstype(::LensTypes value) {
  assert(::LensTypes_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  lenstype_ = value;
}
inline void FrameDescription::set_lenstype(::LensTypes value) {
  _internal_set_lenstype(value);
  // @@protoc_insertion_point(field_set:FrameDescription.lensType)
}

// optional float zoom = 5;
inline bool FrameDescription::_internal_has_zoom() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FrameDescription::has_zoom() const {
  return _internal_has_zoom();
}
inline void FrameDescription::clear_zoom() {
  zoom_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float FrameDescription::_internal_zoom() const {
  return zoom_;
}
inline float FrameDescription::zoom() const {
  // @@protoc_insertion_point(field_get:FrameDescription.zoom)
  return _internal_zoom();
}
inline void FrameDescription::_internal_set_zoom(float value) {
  _has_bits_[0] |= 0x00000040u;
  zoom_ = value;
}
inline void FrameDescription::set_zoom(float value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:FrameDescription.zoom)
}

// optional string description = 6;
inline bool FrameDescription::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FrameDescription::has_description() const {
  return _internal_has_description();
}
inline void FrameDescription::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FrameDescription::description() const {
  // @@protoc_insertion_point(field_get:FrameDescription.description)
  return _internal_description();
}
inline void FrameDescription::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:FrameDescription.description)
}
inline std::string* FrameDescription::mutable_description() {
  // @@protoc_insertion_point(field_mutable:FrameDescription.description)
  return _internal_mutable_description();
}
inline const std::string& FrameDescription::_internal_description() const {
  return description_.Get();
}
inline void FrameDescription::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FrameDescription::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FrameDescription.description)
}
inline void FrameDescription::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FrameDescription.description)
}
inline void FrameDescription::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FrameDescription.description)
}
inline std::string* FrameDescription::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FrameDescription::release_description() {
  // @@protoc_insertion_point(field_release:FrameDescription.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FrameDescription::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FrameDescription.description)
}

// optional string lensName = 7;
inline bool FrameDescription::_internal_has_lensname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FrameDescription::has_lensname() const {
  return _internal_has_lensname();
}
inline void FrameDescription::clear_lensname() {
  lensname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FrameDescription::lensname() const {
  // @@protoc_insertion_point(field_get:FrameDescription.lensName)
  return _internal_lensname();
}
inline void FrameDescription::set_lensname(const std::string& value) {
  _internal_set_lensname(value);
  // @@protoc_insertion_point(field_set:FrameDescription.lensName)
}
inline std::string* FrameDescription::mutable_lensname() {
  // @@protoc_insertion_point(field_mutable:FrameDescription.lensName)
  return _internal_mutable_lensname();
}
inline const std::string& FrameDescription::_internal_lensname() const {
  return lensname_.Get();
}
inline void FrameDescription::_internal_set_lensname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lensname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FrameDescription::set_lensname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lensname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FrameDescription.lensName)
}
inline void FrameDescription::set_lensname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lensname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FrameDescription.lensName)
}
inline void FrameDescription::set_lensname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lensname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FrameDescription.lensName)
}
inline std::string* FrameDescription::_internal_mutable_lensname() {
  _has_bits_[0] |= 0x00000002u;
  return lensname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FrameDescription::release_lensname() {
  // @@protoc_insertion_point(field_release:FrameDescription.lensName)
  if (!_internal_has_lensname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lensname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FrameDescription::set_allocated_lensname(std::string* lensname) {
  if (lensname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lensname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lensname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FrameDescription.lensName)
}

// optional int64 navBegin = 8;
inline bool FrameDescription::_internal_has_navbegin() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FrameDescription::has_navbegin() const {
  return _internal_has_navbegin();
}
inline void FrameDescription::clear_navbegin() {
  navbegin_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameDescription::_internal_navbegin() const {
  return navbegin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameDescription::navbegin() const {
  // @@protoc_insertion_point(field_get:FrameDescription.navBegin)
  return _internal_navbegin();
}
inline void FrameDescription::_internal_set_navbegin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  navbegin_ = value;
}
inline void FrameDescription::set_navbegin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_navbegin(value);
  // @@protoc_insertion_point(field_set:FrameDescription.navBegin)
}

// optional int64 navEnd = 9;
inline bool FrameDescription::_internal_has_navend() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FrameDescription::has_navend() const {
  return _internal_has_navend();
}
inline void FrameDescription::clear_navend() {
  navend_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameDescription::_internal_navend() const {
  return navend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameDescription::navend() const {
  // @@protoc_insertion_point(field_get:FrameDescription.navEnd)
  return _internal_navend();
}
inline void FrameDescription::_internal_set_navend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  navend_ = value;
}
inline void FrameDescription::set_navend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_navend(value);
  // @@protoc_insertion_point(field_set:FrameDescription.navEnd)
}

// optional uint32 strobeMask = 10;
inline bool FrameDescription::_internal_has_strobemask() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FrameDescription::has_strobemask() const {
  return _internal_has_strobemask();
}
inline void FrameDescription::clear_strobemask() {
  strobemask_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameDescription::_internal_strobemask() const {
  return strobemask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FrameDescription::strobemask() const {
  // @@protoc_insertion_point(field_get:FrameDescription.strobeMask)
  return _internal_strobemask();
}
inline void FrameDescription::_internal_set_strobemask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  strobemask_ = value;
}
inline void FrameDescription::set_strobemask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_strobemask(value);
  // @@protoc_insertion_point(field_set:FrameDescription.strobeMask)
}

// -------------------------------------------------------------------

// Picinfo

// required double x00 = 1;
inline bool Picinfo::_internal_has_x00() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Picinfo::has_x00() const {
  return _internal_has_x00();
}
inline void Picinfo::clear_x00() {
  x00_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Picinfo::_internal_x00() const {
  return x00_;
}
inline double Picinfo::x00() const {
  // @@protoc_insertion_point(field_get:Picinfo.x00)
  return _internal_x00();
}
inline void Picinfo::_internal_set_x00(double value) {
  _has_bits_[0] |= 0x00000001u;
  x00_ = value;
}
inline void Picinfo::set_x00(double value) {
  _internal_set_x00(value);
  // @@protoc_insertion_point(field_set:Picinfo.x00)
}

// required double y00 = 2;
inline bool Picinfo::_internal_has_y00() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Picinfo::has_y00() const {
  return _internal_has_y00();
}
inline void Picinfo::clear_y00() {
  y00_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Picinfo::_internal_y00() const {
  return y00_;
}
inline double Picinfo::y00() const {
  // @@protoc_insertion_point(field_get:Picinfo.y00)
  return _internal_y00();
}
inline void Picinfo::_internal_set_y00(double value) {
  _has_bits_[0] |= 0x00000002u;
  y00_ = value;
}
inline void Picinfo::set_y00(double value) {
  _internal_set_y00(value);
  // @@protoc_insertion_point(field_set:Picinfo.y00)
}

// required double x01 = 3;
inline bool Picinfo::_internal_has_x01() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Picinfo::has_x01() const {
  return _internal_has_x01();
}
inline void Picinfo::clear_x01() {
  x01_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Picinfo::_internal_x01() const {
  return x01_;
}
inline double Picinfo::x01() const {
  // @@protoc_insertion_point(field_get:Picinfo.x01)
  return _internal_x01();
}
inline void Picinfo::_internal_set_x01(double value) {
  _has_bits_[0] |= 0x00000004u;
  x01_ = value;
}
inline void Picinfo::set_x01(double value) {
  _internal_set_x01(value);
  // @@protoc_insertion_point(field_set:Picinfo.x01)
}

// required double y01 = 4;
inline bool Picinfo::_internal_has_y01() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Picinfo::has_y01() const {
  return _internal_has_y01();
}
inline void Picinfo::clear_y01() {
  y01_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Picinfo::_internal_y01() const {
  return y01_;
}
inline double Picinfo::y01() const {
  // @@protoc_insertion_point(field_get:Picinfo.y01)
  return _internal_y01();
}
inline void Picinfo::_internal_set_y01(double value) {
  _has_bits_[0] |= 0x00000008u;
  y01_ = value;
}
inline void Picinfo::set_y01(double value) {
  _internal_set_y01(value);
  // @@protoc_insertion_point(field_set:Picinfo.y01)
}

// required double x10 = 5;
inline bool Picinfo::_internal_has_x10() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Picinfo::has_x10() const {
  return _internal_has_x10();
}
inline void Picinfo::clear_x10() {
  x10_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Picinfo::_internal_x10() const {
  return x10_;
}
inline double Picinfo::x10() const {
  // @@protoc_insertion_point(field_get:Picinfo.x10)
  return _internal_x10();
}
inline void Picinfo::_internal_set_x10(double value) {
  _has_bits_[0] |= 0x00000010u;
  x10_ = value;
}
inline void Picinfo::set_x10(double value) {
  _internal_set_x10(value);
  // @@protoc_insertion_point(field_set:Picinfo.x10)
}

// required double y10 = 6;
inline bool Picinfo::_internal_has_y10() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Picinfo::has_y10() const {
  return _internal_has_y10();
}
inline void Picinfo::clear_y10() {
  y10_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Picinfo::_internal_y10() const {
  return y10_;
}
inline double Picinfo::y10() const {
  // @@protoc_insertion_point(field_get:Picinfo.y10)
  return _internal_y10();
}
inline void Picinfo::_internal_set_y10(double value) {
  _has_bits_[0] |= 0x00000020u;
  y10_ = value;
}
inline void Picinfo::set_y10(double value) {
  _internal_set_y10(value);
  // @@protoc_insertion_point(field_set:Picinfo.y10)
}

// required double x11 = 7;
inline bool Picinfo::_internal_has_x11() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Picinfo::has_x11() const {
  return _internal_has_x11();
}
inline void Picinfo::clear_x11() {
  x11_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Picinfo::_internal_x11() const {
  return x11_;
}
inline double Picinfo::x11() const {
  // @@protoc_insertion_point(field_get:Picinfo.x11)
  return _internal_x11();
}
inline void Picinfo::_internal_set_x11(double value) {
  _has_bits_[0] |= 0x00000040u;
  x11_ = value;
}
inline void Picinfo::set_x11(double value) {
  _internal_set_x11(value);
  // @@protoc_insertion_point(field_set:Picinfo.x11)
}

// required double y11 = 8;
inline bool Picinfo::_internal_has_y11() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Picinfo::has_y11() const {
  return _internal_has_y11();
}
inline void Picinfo::clear_y11() {
  y11_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Picinfo::_internal_y11() const {
  return y11_;
}
inline double Picinfo::y11() const {
  // @@protoc_insertion_point(field_get:Picinfo.y11)
  return _internal_y11();
}
inline void Picinfo::_internal_set_y11(double value) {
  _has_bits_[0] |= 0x00000080u;
  y11_ = value;
}
inline void Picinfo::set_y11(double value) {
  _internal_set_y11(value);
  // @@protoc_insertion_point(field_set:Picinfo.y11)
}

// required int64 time = 9;
inline bool Picinfo::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Picinfo::has_time() const {
  return _internal_has_time();
}
inline void Picinfo::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Picinfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Picinfo::time() const {
  // @@protoc_insertion_point(field_get:Picinfo.time)
  return _internal_time();
}
inline void Picinfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  time_ = value;
}
inline void Picinfo::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Picinfo.time)
}

// required int32 width = 10;
inline bool Picinfo::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Picinfo::has_width() const {
  return _internal_has_width();
}
inline void Picinfo::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Picinfo::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Picinfo::width() const {
  // @@protoc_insertion_point(field_get:Picinfo.width)
  return _internal_width();
}
inline void Picinfo::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  width_ = value;
}
inline void Picinfo::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Picinfo.width)
}

// required int32 height = 11;
inline bool Picinfo::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Picinfo::has_height() const {
  return _internal_has_height();
}
inline void Picinfo::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Picinfo::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Picinfo::height() const {
  // @@protoc_insertion_point(field_get:Picinfo.height)
  return _internal_height();
}
inline void Picinfo::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  height_ = value;
}
inline void Picinfo::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Picinfo.height)
}

// -------------------------------------------------------------------

// Metainfo

// required bytes IP = 1;
inline bool Metainfo::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Metainfo::has_ip() const {
  return _internal_has_ip();
}
inline void Metainfo::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Metainfo::ip() const {
  // @@protoc_insertion_point(field_get:Metainfo.IP)
  return _internal_ip();
}
inline void Metainfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:Metainfo.IP)
}
inline std::string* Metainfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:Metainfo.IP)
  return _internal_mutable_ip();
}
inline const std::string& Metainfo::_internal_ip() const {
  return ip_.Get();
}
inline void Metainfo::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metainfo::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Metainfo.IP)
}
inline void Metainfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Metainfo.IP)
}
inline void Metainfo::set_ip(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Metainfo.IP)
}
inline std::string* Metainfo::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metainfo::release_ip() {
  // @@protoc_insertion_point(field_release:Metainfo.IP)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metainfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Metainfo.IP)
}

// required int32 FrameNumber = 2;
inline bool Metainfo::_internal_has_framenumber() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Metainfo::has_framenumber() const {
  return _internal_has_framenumber();
}
inline void Metainfo::clear_framenumber() {
  framenumber_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metainfo::_internal_framenumber() const {
  return framenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metainfo::framenumber() const {
  // @@protoc_insertion_point(field_get:Metainfo.FrameNumber)
  return _internal_framenumber();
}
inline void Metainfo::_internal_set_framenumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  framenumber_ = value;
}
inline void Metainfo::set_framenumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_framenumber(value);
  // @@protoc_insertion_point(field_set:Metainfo.FrameNumber)
}

// required int32 DataSource = 3;
inline bool Metainfo::_internal_has_datasource() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Metainfo::has_datasource() const {
  return _internal_has_datasource();
}
inline void Metainfo::clear_datasource() {
  datasource_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metainfo::_internal_datasource() const {
  return datasource_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metainfo::datasource() const {
  // @@protoc_insertion_point(field_get:Metainfo.DataSource)
  return _internal_datasource();
}
inline void Metainfo::_internal_set_datasource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  datasource_ = value;
}
inline void Metainfo::set_datasource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datasource(value);
  // @@protoc_insertion_point(field_set:Metainfo.DataSource)
}

// required int32 Width = 4;
inline bool Metainfo::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Metainfo::has_width() const {
  return _internal_has_width();
}
inline void Metainfo::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metainfo::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metainfo::width() const {
  // @@protoc_insertion_point(field_get:Metainfo.Width)
  return _internal_width();
}
inline void Metainfo::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void Metainfo::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Metainfo.Width)
}

// required int32 Height = 5;
inline bool Metainfo::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Metainfo::has_height() const {
  return _internal_has_height();
}
inline void Metainfo::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metainfo::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metainfo::height() const {
  // @@protoc_insertion_point(field_get:Metainfo.Height)
  return _internal_height();
}
inline void Metainfo::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void Metainfo::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Metainfo.Height)
}

// required int32 Depth = 6;
inline bool Metainfo::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Metainfo::has_depth() const {
  return _internal_has_depth();
}
inline void Metainfo::clear_depth() {
  depth_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metainfo::_internal_depth() const {
  return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Metainfo::depth() const {
  // @@protoc_insertion_point(field_get:Metainfo.Depth)
  return _internal_depth();
}
inline void Metainfo::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  depth_ = value;
}
inline void Metainfo::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:Metainfo.Depth)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LensTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LensTypes>() {
  return ::LensTypes_descriptor();
}
template <> struct is_proto_enum< ::CameraTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CameraTypes>() {
  return ::CameraTypes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Header_2eproto
